// schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                     Int             @id @default(autoincrement())
  email                  String          @unique
  name                   String
  password               String
  role                   String[]        @default(["user"])
  cargo                  String?         @db.VarChar(50)
  unidade                String?         @db.VarChar(50)
  createdAt              DateTime        @default(now())
  updatedAt              DateTime        @updatedAt
  mentorId               Int?
  mentor                 User?           @relation("Mentor", fields: [mentorId], references: [id], onDelete: SetNull)
  mentorados             User[]          @relation("Mentor")
  gestorId               Int?
  trilhaId               Int?
  trilha                 Trilha?         @relation(fields: [trilhaId], references: [id], onDelete: SetNull)
  autoAvaliacoesFeitas   Autoavaliacao[] @relation("AutoavaliacoesDoUsuario")
  avaliacoes360Feitas    Avaliacao360[]  @relation("Avaliador360")
  avaliacoes360Recebidas Avaliacao360[]  @relation("Avaliado360")
  referenciasFeitas      Referencia[]    @relation("Referenciador")
  referenciasRecebidas   Referencia[]    @relation("Referenciado")
  ResumoIA               ResumoIA[]
  equalizacoesFeitas     Equalizacao[]   @relation("AvaliadorEqualizacao")
  equalizacoesRecebidas  Equalizacao[]   @relation("AvaliadoEqualizacao")
  mentoringsFeitos       Mentoring[]     @relation("MentorMentoring")
  mentoringsRecebidos    Mentoring[]     @relation("MentoradoMentoring")

  @@index([trilhaId])
  @@index([email])
  @@map("users")
}

model Ciclo {
  id                          Int             @id @default(autoincrement())
  name                        String          @db.VarChar(255)
  year                        Int
  period                      Int
  status                      String          @default("aberto") @db.VarChar(50)
  createdAt                   DateTime        @default(now())
  updatedAt                   DateTime        @updatedAt
  dataAberturaAvaliacao       DateTime
  dataFechamentoAvaliacao     DateTime
  dataAberturaRevisaoGestor   DateTime
  dataFechamentoRevisaoGestor DateTime
  dataAberturaRevisaoComite   DateTime
  dataFechamentoRevisaoComite DateTime
  dataFinalizacao             DateTime
  referencias                 Referencia[]
  autoAvaliacoes              Autoavaliacao[]
  avaliacoes360               Avaliacao360[]
  criterios                   Criterio[]
  ResumoIA                    ResumoIA[]
  mentorings                  Mentoring[]

  @@unique([year, period])
  @@index([year])
  @@index([period])
  @@map("ciclos")
}

model Trilha {
  id        Int        @id @default(autoincrement())
  name      String     @unique @db.VarChar(255)
  users     User[]
  criterio  Criterio[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  @@map("trilhas")
}

model Criterio {
  id             Int             @id @default(autoincrement())
  name           String          @db.VarChar(255)
  tipo           String          @db.VarChar(50)
  peso           Float           @default(20.0)
  description    String          @db.VarChar(255)
  idCiclo        Int
  enabled        Boolean         @default(true)
  trilhaId       Int
  ciclo          Ciclo           @relation(fields: [idCiclo], references: [id], onDelete: Restrict)
  trilha         Trilha          @relation(fields: [trilhaId], references: [id], onDelete: Cascade)
  autoAvaliacoes Autoavaliacao[]
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt

  @@unique([name, trilhaId])
  @@index([trilhaId])
  @@index([idCiclo])
  @@map("criterio")
}

model ResumoIA {
  id        Int      @id @default(autoincrement())
  userId    Int
  idCiclo   Int
  resumo    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  ciclo     Ciclo    @relation(fields: [idCiclo], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, idCiclo])
  @@map("resumos_ia")
}

model Referencia {
  id              Int      @id @default(autoincrement())
  idReferenciador Int
  idReferenciado  Int
  justificativa   String
  idCiclo         Int
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  referenciador User  @relation("Referenciador", fields: [idReferenciador], references: [id], onDelete: Restrict)
  referenciado  User  @relation("Referenciado", fields: [idReferenciado], references: [id], onDelete: Restrict)
  ciclo         Ciclo @relation(fields: [idCiclo], references: [id], onDelete: Restrict)

  @@unique([idReferenciador, idReferenciado, idCiclo])
  @@index([idReferenciador])
  @@index([idReferenciado])
  @@index([idCiclo])
  @@map("referencias")
}

model Autoavaliacao {
  id                  Int       @id @default(autoincrement())
  idUser              Int
  idCiclo             Int
  nota                Float?
  justificativa       String
  criterioId          Int?
  notaGestor          Float?
  justificativaGestor String?
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  user                User      @relation("AutoavaliacoesDoUsuario", fields: [idUser], references: [id], onDelete: Cascade)
  ciclo               Ciclo     @relation(fields: [idCiclo], references: [id], onDelete: Restrict)
  criterio            Criterio? @relation(fields: [criterioId], references: [id], onDelete: Restrict)

  @@unique([idUser, idCiclo])
  @@index([idUser])
  @@index([criterioId])
  @@index([idCiclo])
  @@map("avaliacoes")
}

enum MotivacaoTrabalhoNovamente {
  DISCORDO_TOTALMENTE
  DISCORDO_PARCIALMENTE
  INDIFERENTE
  CONCORDO_PARCIALMENTE
  CONCORDO_TOTALMENTE
}

model Avaliacao360 {
  id                   Int                        @id @default(autoincrement())
  idAvaliador          Int
  idAvaliado           Int
  idCiclo              Int
  nota                 Float?
  pontosFortes         String
  pontosMelhora        String
  nomeProjeto          String                     @db.VarChar(255)
  periodoMeses         Int
  trabalhariaNovamente MotivacaoTrabalhoNovamente
  avaliador            User                       @relation("Avaliador360", fields: [idAvaliador], references: [id], onDelete: Restrict)
  avaliado             User                       @relation("Avaliado360", fields: [idAvaliado], references: [id], onDelete: Restrict)
  ciclo                Ciclo                      @relation(fields: [idCiclo], references: [id], onDelete: Restrict)
  createdAt            DateTime                   @default(now())
  updatedAt            DateTime                   @updatedAt

  @@unique([idAvaliador, idAvaliado, idCiclo])
  @@index([idAvaliador])
  @@index([idAvaliado])
  @@index([idCiclo])
  @@map("avaliacoes_360")
}

model Mentoring {
  id            Int      @id @default(autoincrement())
  idMentor      Int
  idMentorado   Int
  idCiclo       Int
  nota          Float?
  justificativa String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  ciclo     Ciclo @relation(fields: [idCiclo], references: [id], onDelete: Restrict)
  mentor    User  @relation("MentorMentoring", fields: [idMentor], references: [id], onDelete: Restrict)
  mentorado User  @relation("MentoradoMentoring", fields: [idMentorado], references: [id], onDelete: Restrict)
}

enum StatusEqualizacao {
  PENDENTE
  FINALIZADO
}

model Equalizacao {
  id                   Int               @id @default(autoincrement())
  idAvaliador          Int
  idAvaliado           Int
  mediaAutoavaliacao   Float
  mediaAvaliacaoGestor Float
  mediaAvaliacao360    Float
  notaFinal            Float
  justificativa        String
  status               StatusEqualizacao
  avaliador            User              @relation("AvaliadorEqualizacao", fields: [idAvaliador], references: [id], onDelete: Restrict)
  avaliado             User              @relation("AvaliadoEqualizacao", fields: [idAvaliado], references: [id], onDelete: Restrict)

  @@map("equalizacoes")
}
