// schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  Int           @id @default(autoincrement())
  email               String        @unique
  name                String
  password            String
  role                String        @default("user")
  unidade             String?       @db.VarChar(50)
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt
  mentorId           Int?
  mentor             User?         @relation("Mentor", fields: [mentorId], references: [id], onDelete: SetNull)
  mentorados         User[]        @relation("Mentor")
  avaliadorId         Int?
  trilhaId            Int?          
  trilha              Trilha?       @relation(fields: [trilhaId], references: [id], onDelete: SetNull)
  avaliacoesFeitas    Avaliacao[]   @relation("Avaliador")
  avaliacoesRecebidas Avaliacao[]   @relation("Avaliado")
  avaliacoes360Feitas Avaliacao360[] @relation("Avaliador360")
  avaliacoes360Recebidas Avaliacao360[] @relation("Avaliado360")
  referenciasFeitas   referencia[]  @relation("Referenciador")
  referenciasRecebidas referencia[] @relation("Referenciado")
  
  @@index([trilhaId])
  @@index([email])
  @@map("users")
}

model Trilha {
  id       Int       @id @default(autoincrement())
  name     String    @db.VarChar(255)
  users    User[]    
  criterio Criterio[] 
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt

  @@map("trilhas")
}

model Criterio {
  id         Int         @id @default(autoincrement())
  name       String      @db.VarChar(255)
  tipo       String      @db.VarChar(50)
  peso       Float       @default(20.0)
  description       String      @db.VarChar(255)
  enabled    Boolean     @default(true)
  trilhaId    Int
  trilha      Trilha      @relation(fields: [trilhaId], references: [id], onDelete: Cascade)
  avaliacoes Avaliacao[] 
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt

  @@unique([name, trilhaId])
  @@index([trilhaId])
  @@map("criterio")
}

model referencia {
  id         Int       @id @default(autoincrement())
  idReferenciador Int
  idReferenciado Int
  justificativa String
  idCiclo    Int
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  
  referenciador User @relation("Referenciador", fields: [idReferenciador], references: [id], onDelete: Restrict)
  referenciado  User @relation("Referenciado", fields: [idReferenciado], references: [id], onDelete: Restrict)

  @@unique([idReferenciador, idReferenciado, idCiclo])
  @@index([idReferenciador])
  @@index([idReferenciado])
  @@index([idCiclo])
  @@map("referencias")
}


model Avaliacao {
  id            Int       @id @default(autoincrement())
  idAvaliador   Int
  idAvaliado    Int
  idCiclo       Int
  nota          Float?
  justificativa String
  criterioId    Int?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  avaliador     User      @relation("Avaliador", fields: [idAvaliador], references: [id], onDelete: Restrict)
  avaliado      User      @relation("Avaliado", fields: [idAvaliado], references: [id], onDelete: Restrict)
  criterio      Criterio?  @relation(fields: [criterioId], references: [id], onDelete: Restrict)

  @@unique([idAvaliador, idAvaliado, idCiclo, criterioId])
  @@index([idAvaliador])
  @@index([idAvaliado])
  @@index([criterioId])
  @@index([idCiclo])
  @@map("avaliacoes")
}

enum MotivacaoTrabalhoNovamente {
  DISCORDO_TOTALMENTE
  DISCORDO_PARCIALMENTE
  INDIFERENTE
  CONCORDO_PARCIALMENTE
  CONCORDO_TOTALMENTE
}

model Avaliacao360 {
  id            Int       @id @default(autoincrement())
  idAvaliador   Int
  idAvaliado    Int
  idCiclo       Int
  nota          Float?
  pontosFortes  String
  pontosMelhora String
  nomeProjeto   String    @db.VarChar(255)
  periodoMeses  Int
  trabalhariaNovamente MotivacaoTrabalhoNovamente
  avaliador     User      @relation("Avaliador360", fields: [idAvaliador], references: [id], onDelete: Restrict)
  avaliado      User      @relation("Avaliado360", fields: [idAvaliado], references: [id], onDelete: Restrict)
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt

  @@unique([idAvaliador, idAvaliado, idCiclo])
  @@index([idAvaliador])
  @@index([idAvaliado])
  @@index([idCiclo])
  @@map("avaliacoes_360")
}