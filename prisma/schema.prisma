// schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  Int           @id @default(autoincrement())
  email               String        @unique
  name                String
  password            String
  role                String        @default("user")
  unidade             String?       @db.VarChar(50)
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt
  mentorId           Int?
  mentor             User?         @relation("Mentor", fields: [mentorId], references: [id], onDelete: SetNull)
  mentorados         User[]        @relation("Mentor")
  avaliadorId         Int?
  trilhaId            Int?          
  trilha              Trilha?       @relation(fields: [trilhaId], references: [id], onDelete: SetNull)
  
  autoavaliacoesFeitas    Autoavaliacao[]   @relation("AutoavaliadorRelation")
  autoavaliacoesRecebidas Autoavaliacao[]   @relation("AutoavaliadoRelation")
  
  mentoringFeito     Mentoring[]   @relation("MentorRelation")
  mentoringRecebido  Mentoring[]   @relation("MentoradoRelation")
  
  avaliacoes360Feitas Avaliacao360[] @relation("Avaliador360")
  avaliacoes360Recebidas Avaliacao360[] @relation("Avaliado360")
  
  referenciasFeitas   referencia[]  @relation("Referenciador")
  referenciasRecebidas referencia[] @relation("Referenciado")
  
  @@index([trilhaId])
  @@index([email])
  @@map("users")
  ResumoIA ResumoIA[]
}

model Ciclo {
  id         Int       @id @default(autoincrement())
  name       String    @db.VarChar(255)
  year       Int
  period     Int
  status     String    @db.VarChar(50) @default("aberto")
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt
  referencias referencia[] 
  autoavaliacoes Autoavaliacao[]  // ✅ RENOMEAR
  mentoring Mentoring[]          // ✅ NOVO
  avaliacoes360 Avaliacao360[] 
  criterios Criterio[]

  @@unique([year, period])
  @@index([year])
  @@index([period])
  @@map("ciclos")
  ResumoIA ResumoIA[]
}

model Trilha {
  id       Int       @id @default(autoincrement())
  name     String    @db.VarChar(255) @unique
  users    User[]    
  criterio Criterio[] 
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt

  @@map("trilhas")
}

model Criterio {
  id         Int         @id @default(autoincrement())
  name       String      @db.VarChar(255)
  tipo       String      @db.VarChar(50)
  peso       Float       @default(20.0)
  description       String      @db.VarChar(255)
  idCiclo    Int
  enabled    Boolean     @default(true)
  trilhaId    Int
  ciclo       Ciclo       @relation(fields: [idCiclo], references: [id], onDelete: Restrict)
  trilha      Trilha      @relation(fields: [trilhaId], references: [id], onDelete: Cascade)
  autoavaliacoes Autoavaliacao[]  // ✅ RENOMEAR
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt

  @@unique([name, trilhaId])
  @@index([trilhaId])
  @@index([idCiclo])
  @@map("criterio")
}

model ResumoIA {
  id        Int      @id @default(autoincrement())
  userId    Int
  idCiclo   Int
  resumo    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  ciclo     Ciclo    @relation(fields: [idCiclo], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, idCiclo])
  @@map("resumos_ia")
}

model referencia {
  id         Int       @id @default(autoincrement())
  idReferenciador Int
  idReferenciado Int
  justificativa String
  idCiclo    Int
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  
  referenciador User @relation("Referenciador", fields: [idReferenciador], references: [id], onDelete: Restrict)
  referenciado  User @relation("Referenciado", fields: [idReferenciado], references: [id], onDelete: Restrict)
  ciclo         Ciclo @relation(fields: [idCiclo], references: [id], onDelete: Restrict)

  @@unique([idReferenciador, idReferenciado, idCiclo])
  @@index([idReferenciador])
  @@index([idReferenciado])
  @@index([idCiclo])
  @@map("referencias")
}

model Autoavaliacao {
  id                  Int       @id @default(autoincrement())
  idAvaliador         Int
  idAvaliado          Int
  idCiclo             Int
  criterioId          Int
  nota                Float?    // ✅ FLOAT para permitir decimais
  notaGestor          Float?    // ✅ FLOAT para permitir decimais
  justificativa       String
  justificativaGestor String?
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  avaliador           User      @relation("AutoavaliadorRelation", fields: [idAvaliador], references: [id])
  avaliado            User      @relation("AutoavaliadoRelation", fields: [idAvaliado], references: [id])
  ciclo               Ciclo     @relation(fields: [idCiclo], references: [id])
  criterio            Criterio? @relation(fields: [criterioId], references: [id])  // ✅ OPCIONAL

  @@unique([idAvaliador, idAvaliado, idCiclo, criterioId])
  @@map("autoavaliacoes")
}

model Mentoring {
  id                  Int       @id @default(autoincrement())
  idMentor            Int       // Quem está sendo avaliado (mentor)
  idMentorado         Int       // Quem está avaliando (mentorado)
  idCiclo             Int
  nota                Float?    // Nota da avaliação do mentor
  justificativa       String    // Justificativa do mentorado
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  
  mentor              User      @relation("MentorRelation", fields: [idMentor], references: [id])
  mentorado           User      @relation("MentoradoRelation", fields: [idMentorado], references: [id])
  ciclo               Ciclo     @relation(fields: [idCiclo], references: [id])

  @@unique([idMentor, idMentorado, idCiclo])
  @@index([idMentor])
  @@index([idMentorado])
  @@index([idCiclo])
  @@map("mentoring")
}

enum MotivacaoTrabalhoNovamente {
  DISCORDO_TOTALMENTE
  DISCORDO_PARCIALMENTE
  INDIFERENTE
  CONCORDO_PARCIALMENTE
  CONCORDO_TOTALMENTE
}

model Avaliacao360 {
  id            Int       @id @default(autoincrement())
  idAvaliador   Int
  idAvaliado    Int
  idCiclo       Int
  nota          Float?
  pontosFortes  String
  pontosMelhora String
  nomeProjeto   String    @db.VarChar(255)
  periodoMeses  Int
  trabalhariaNovamente MotivacaoTrabalhoNovamente
  avaliador     User      @relation("Avaliador360", fields: [idAvaliador], references: [id], onDelete: Restrict)
  avaliado      User      @relation("Avaliado360", fields: [idAvaliado], references: [id], onDelete: Restrict)
  ciclo         Ciclo     @relation(fields: [idCiclo], references: [id], onDelete: Restrict)
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt

  @@unique([idAvaliador, idAvaliado, idCiclo])
  @@index([idAvaliador])
  @@index([idAvaliado])
  @@index([idCiclo])
  @@map("avaliacoes_360")
}